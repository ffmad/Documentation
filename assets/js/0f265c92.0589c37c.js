(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{126:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=a.a.createContext({}),p=function(e){var t=a.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=p(r),b=n,f=s["".concat(c,".").concat(b)]||s[b]||d[b]||o;return r?a.a.createElement(f,i(i({ref:t},u),{},{components:r})):a.a.createElement(f,i({ref:t},u))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var u=2;u<o;u++)c[u]=r[u];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},189:function(e,t,r){"use strict";r.r(t),t.default=r.p+"assets/images/platform_architecture-82767f030527fb81f177358ad691861a.png"},69:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),o=(r(0),r(126)),c={title:"Platform Architecture"},i={unversionedId:"advanced/architecture",id:"advanced/architecture",isDocsHomePage:!1,title:"Platform Architecture",description:"In the figure below you can see how all Counterparty platform components interact with each other.",source:"@site/docs/advanced/architecture.md",slug:"/advanced/architecture",permalink:"/Documentation/docs/advanced/architecture",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/advanced/architecture.md",version:"current",sidebar:"advanced",next:{title:"Protocol Specification",permalink:"/Documentation/docs/advanced/protocol"}},l=[{value:"counterparty-server",id:"counterparty-server",children:[]},{value:"counterblock",id:"counterblock",children:[]},{value:"Counterwallet",id:"counterwallet",children:[]},{value:"armory_utxsvr",id:"armory_utxsvr",children:[]}],u={toc:l};function p(e){var t=e.components,c=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},u,c,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In the figure below you can see how all Counterparty platform components interact with each other."),Object(o.b)("p",null,Object(o.b)("img",{src:r(189).default})),Object(o.b)("h2",{id:"counterparty-server"},"counterparty-server"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"counterparty-server")," is the name for the combination of ",Object(o.b)("inlineCode",{parentName:"p"},"counterparty-lib")," and ",Object(o.b)("inlineCode",{parentName:"p"},"counterparty-cli"),". It serves as the reference client for Counterparty, and implements support for the core Counterparty protocol via a provided REST API and command line interface."),Object(o.b)("h2",{id:"counterblock"},"counterblock"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"counterblock")," provides additional services (required by counterwallet and potentially other services) beyond those offered in the API provided by ",Object(o.b)("inlineCode",{parentName:"p"},"counterparty-server"),". It features a full-fledged JSON RPC-based API, and has an extensible architecture to support custom plugins."),Object(o.b)("h2",{id:"counterwallet"},"Counterwallet"),Object(o.b)("p",null,"Counterwallet is a web wallet for Bitcoin (BTC) and Counterparty (XCP). It is being actively developed and currently implements most Counterparty features, such as:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Fully functional wallet for BTC, XCP, and user-created tokens"),Object(o.b)("li",{parentName:"ul"},"Peer-to-peer asset trading with algorithmic order matching (XCP, other assets)"),Object(o.b)("li",{parentName:"ul"},"Custom asset creation"),Object(o.b)("li",{parentName:"ul"},"Betting"),Object(o.b)("li",{parentName:"ul"},"Broadcasting data on the Bitcoin Blockchain"),Object(o.b)("li",{parentName:"ul"},"Multisig"),Object(o.b)("li",{parentName:"ul"},"Offline (Armory) transactions")),Object(o.b)("h2",{id:"armory_utxsvr"},"armory_utxsvr"),Object(o.b)("p",null,"A service used by counterblock with Counterwallet to support Offline Armory transactions. This service requires Armory itself."))}p.isMDXComponent=!0}}]);