(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{112:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),r=(n(0),n(126)),s={title:"Understanding assets on Counterparty"},o={unversionedId:"basics/assets/counterparty-assets",id:"basics/assets/counterparty-assets",isDocsHomePage:!1,title:"Understanding assets on Counterparty",description:'With Counterparty, users can create their own assets (also known as "tokens", "coins" or "currencies") inside the Bitcoin blockchain. These are seperate from Bitcoin the currency itself, but exist entirely inside ordinary Bitcoin transactions. Tokens can be received, stored, and sent from any Bitcoin address to any other. They can also be placed in cold storage. Unlike Colored Coins, Counterparty tokens are not tied to the BTC balance of any given address. This means that sending/receiving bitcoins has no effect on the balance of tokens.',source:"@site/docs/basics/assets/counterparty-assets.md",slug:"/basics/assets/counterparty-assets",permalink:"/Documentation/docs/basics/assets/counterparty-assets",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/basics/assets/counterparty-assets.md",version:"current",sidebar:"basics",previous:{title:"An incencentivization token",permalink:"/Documentation/docs/basics/what-is-counterparty/an-incentivization-token"},next:{title:"Enhanced Asset Info",permalink:"/Documentation/docs/basics/assets/enhanced-asset"}},c=[{value:"Creating assets",id:"creating-assets",children:[{value:"The different kinds of assets",id:"the-different-kinds-of-assets",children:[]}]},{value:"Sending assets (<code>send</code>)",id:"sending-assets-send",children:[]},{value:"Paying distributions on assets",id:"paying-distributions-on-assets",children:[]},{value:"Trading on the decentralized exchange",id:"trading-on-the-decentralized-exchange",children:[{value:"Creating an order",id:"creating-an-order",children:[]},{value:"Protocol-based trustless escrow",id:"protocol-based-trustless-escrow",children:[]}]}],l={toc:c};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,'With Counterparty, users can create their own assets (also known as "tokens", "coins" or "currencies") ',Object(r.b)("em",{parentName:"p"},"inside")," the Bitcoin blockchain. These are seperate from Bitcoin the currency itself, but exist entirely inside ordinary Bitcoin transactions. Tokens can be received, stored, and sent from any Bitcoin address to any other. They can also be placed in cold storage. Unlike Colored Coins, Counterparty tokens are ",Object(r.b)("em",{parentName:"p"},"not")," tied to the BTC balance of any given address. This means that sending/receiving bitcoins has no effect on the balance of tokens."),Object(r.b)("p",null,"Among other features, Counterparty adds the ability ",Object(r.b)("em",{parentName:"p"},"create"),", ",Object(r.b)("em",{parentName:"p"},"send"),", ",Object(r.b)("em",{parentName:"p"},"trade"),", and ",Object(r.b)("em",{parentName:"p"},"pay distributions on")," assets, in a fully decentralized and trustless manner. While Counterparty has its own internal currency (XCP), trading and creating assets does not require anything apart from regular Bitcoin transaction fees."),Object(r.b)("p",null,"Many of the features described below can be accessed using the Web-based Counterwallet. Especially casual users and those without a ",Object(r.b)("inlineCode",{parentName:"p"},"counterparty-cli")," setup can benefit from the convenience of Counterwallet."),Object(r.b)("h2",{id:"creating-assets"},"Creating assets"),Object(r.b)("p",null,"Counterparty allows users to ",Object(r.b)("em",{parentName:"p"},"issue assets"),". An asset that is created\nwithin the Counterparty protocol is often called a ",Object(r.b)("em",{parentName:"p"},"user-created token"),".\nUser-created tokens are just as real as XCP or even BTC. With the asset\nissuance function, every user has the ability to create a new currency project inside\nthe Bitcoin and Counterparty ecosystem."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"You can create two different types of assets:")),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Named"),": A unique string of 4 to 12 uppercase Latin characters (inclusive) not beginning with \u2018A\u2019. Alphabetic tokens carry a one\u2010time issuance fee of ",Object(r.b)("inlineCode",{parentName:"p"},"0.5 XCP")," to discourage spam and squatting. This fee is burned (permanently taken out of circulation). ",Object(r.b)("inlineCode",{parentName:"p"},"BTC")," and ",Object(r.b)("inlineCode",{parentName:"p"},"XCP")," are the only three\u2010character asset names. For more information, see the Assets section in the Counterparty specification.")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"Numeric (Free)"),": An integer between ",Object(r.b)("inlineCode",{parentName:"p"},"26^12 + 1")," and ",Object(r.b)("inlineCode",{parentName:"p"},"256^8")," (inclusive), prefixed with ",Object(r.b)("inlineCode",{parentName:"p"},"A"),". Numeric assets only require one Bitcoin transaction fee to be created."))),Object(r.b)("h3",{id:"the-different-kinds-of-assets"},"The different kinds of assets"),Object(r.b)("p",null,"The most basic kind of asset must specify:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"who is issuing it (",Object(r.b)("inlineCode",{parentName:"li"},"source"),")"),Object(r.b)("li",{parentName:"ul"},"the name of the asset (",Object(r.b)("inlineCode",{parentName:"li"},"asset"),")"),Object(r.b)("li",{parentName:"ul"},"how much of ",Object(r.b)("inlineCode",{parentName:"li"},"asset")," is being issued (",Object(r.b)("inlineCode",{parentName:"li"},"quantity"),")"),Object(r.b)("li",{parentName:"ul"},"a description of asset (",Object(r.b)("inlineCode",{parentName:"li"},"description"),")")),Object(r.b)("p",null,"It is possible to issue\nmore of ",Object(r.b)("inlineCode",{parentName:"p"},"asset"),", but, at any one time, there can only be one address\nwhich issues ",Object(r.b)("inlineCode",{parentName:"p"},"asset"),". With that said, the Counterparty protocol allows\n",Object(r.b)("inlineCode",{parentName:"p"},"source")," to transfer issuance rights of ",Object(r.b)("inlineCode",{parentName:"p"},"asset"),". Moreover, an asset can\nalso be locked, so that there can be no further issuances of it. (See\nthe instructions on how to do this with ",Object(r.b)("inlineCode",{parentName:"p"},"counterparty-cli"),").\nA description must always be included, even if ",Object(r.b)("inlineCode",{parentName:"p"},"description")," is just an\nempty string; the syntax of an asset ",Object(r.b)("em",{parentName:"p"},"with no description")," is\n",Object(r.b)("inlineCode",{parentName:"p"},'description=""'),"."),Object(r.b)("p",null,"Beyond creating the most basic asset, it is also possible to make assets\neither ",Object(r.b)("em",{parentName:"p"},"divisible")," or ",Object(r.b)("em",{parentName:"p"},"callable"),". If an asset is made divisible (or\ncallable) upon its initial issuance, it must always be divisible (or\ncallable) with every issuance thereafter. A divisible user-created asset\nis, like, Bitcoin and XCP, divisible up to 8 decimal places. A callable\nasset is an asset which the issuer can call back (i.e. repurchase) from\nits owners at a date (",Object(r.b)("inlineCode",{parentName:"p"},"call-date"),") and for a price (",Object(r.b)("inlineCode",{parentName:"p"},"call-price"),")\nspecified at the initial issuance."),Object(r.b)("h2",{id:"sending-assets-send"},"Sending assets (",Object(r.b)("inlineCode",{parentName:"h2"},"send"),")"),Object(r.b)("p",null,"To send an asset in Counterparty, one must specify:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"who is sending the asset (",Object(r.b)("inlineCode",{parentName:"li"},"source"),")"),Object(r.b)("li",{parentName:"ul"},"what asset ",Object(r.b)("inlineCode",{parentName:"li"},"source")," is sending (",Object(r.b)("inlineCode",{parentName:"li"},"asset"),")"),Object(r.b)("li",{parentName:"ul"},"how much of ",Object(r.b)("inlineCode",{parentName:"li"},"asset")," ",Object(r.b)("inlineCode",{parentName:"li"},"source")," is sending (",Object(r.b)("inlineCode",{parentName:"li"},"quantity"),")"),Object(r.b)("li",{parentName:"ul"},"to whom ",Object(r.b)("inlineCode",{parentName:"li"},"source")," is sending ",Object(r.b)("inlineCode",{parentName:"li"},"quantity")," of asset (",Object(r.b)("inlineCode",{parentName:"li"},"destination"),")")),Object(r.b)("h2",{id:"paying-distributions-on-assets"},"Paying distributions on assets"),Object(r.b)("p",null,"It is possible to distribute funds proportionally among asset holders using the ",Object(r.b)("inlineCode",{parentName:"p"},"distribution"),"\nfunction. This feature is also also known as ",Object(r.b)("inlineCode",{parentName:"p"},"dividend payments"),", depending on their desired purpose. Distributions are paid in in any ",Object(r.b)("inlineCode",{parentName:"p"},"distribution_asset")," to everyone who\nholds the asset in proportion to how many units he holds; specifically:\nLet ",Object(r.b)("inlineCode",{parentName:"p"},"total")," equal the total distribution paid out, and\n",Object(r.b)("inlineCode",{parentName:"p"},"quantity")," be the total amount of asset, then:\n",Object(r.b)("inlineCode",{parentName:"p"},"quantity-per-unit = total/quantity")),Object(r.b)("p",null,"Distributions can be paid out to any assets that you ownership and control over. You can freely select the currency in which distributions are to be paid out: BTC, XCP, or any other user-created asset."),Object(r.b)("h2",{id:"trading-on-the-decentralized-exchange"},"Trading on the decentralized exchange"),Object(r.b)("p",null,"Counterparty supports ",Object(r.b)("em",{parentName:"p"},"peer-to-peer asset exchange"),": users can trade\nassets with no middleman and no counterparty risk. The platform upon\nwhich trading is done is Counterparty\u2019s ",Object(r.b)("em",{parentName:"p"},"decentralized exchange")," and the Bitcoin blockchain. In\nwhat follows trading on the decentralized exchange will be detailed and\nexplained by means of examples. For the purposes of the following\nuse-cases:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"\u201cordern\u201d denotes the ",Object(r.b)("em",{parentName:"li"},"nth")," order in time, ",Object(r.b)("inlineCode",{parentName:"li"},"give_asset n")," denotes\nthe asset being given in the order, etc."),Object(r.b)("li",{parentName:"ul"},"Sally\u2019s creates order1 and Alice creates order2"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"give_asset2 = get_asset1"))),Object(r.b)("h3",{id:"creating-an-order"},"Creating an order"),Object(r.b)("p",null,"At its most basic level, a trade on Counterparty\u2019s decentralized\nexchange consists of two ",Object(r.b)("em",{parentName:"p"},"orders"),", which are ",Object(r.b)("em",{parentName:"p"},"matched")," by the protocol.\nWhen Sally is constructing her order, she must specify:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"her address (",Object(r.b)("inlineCode",{parentName:"li"},"source"),"1)"),Object(r.b)("li",{parentName:"ul"},"the asset she will give (",Object(r.b)("inlineCode",{parentName:"li"},"give_asset1"),")"),Object(r.b)("li",{parentName:"ul"},"the quantity of ",Object(r.b)("inlineCode",{parentName:"li"},"give_asset1")," she will give (",Object(r.b)("inlineCode",{parentName:"li"},"give_quantity1"),")"),Object(r.b)("li",{parentName:"ul"},"the asset she will get (",Object(r.b)("inlineCode",{parentName:"li"},"get_asset"),")"),Object(r.b)("li",{parentName:"ul"},"the quantity of ",Object(r.b)("inlineCode",{parentName:"li"},"get_asset1")," she will get (",Object(r.b)("inlineCode",{parentName:"li"},"get_quantity"),")"),Object(r.b)("li",{parentName:"ul"},"how long before her order expires (",Object(r.b)("inlineCode",{parentName:"li"},"expiration1"),")")),Object(r.b)("h3",{id:"protocol-based-trustless-escrow"},"Protocol-based trustless escrow"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"The Counterparty protocol acts as an escrow service, and\nthereby eliminates counterparty risk from the exchange of assets."),"\nOnce Sally publishes her order ",Object(r.b)("inlineCode",{parentName:"p"},"give_quantity1")," of ",Object(r.b)("inlineCode",{parentName:"p"},"give_asset1")," is\ndebited from her address; her address is debited ",Object(r.b)("em",{parentName:"p"},"before")," her order is\nmatched with Alice\u2019s, and so she cannot spend those funds before\n",Object(r.b)("inlineCode",{parentName:"p"},"expiration1")," passes, i.e. until her order expires. In the meantime,\nSally\u2019s funds are not lost or borrowed, they are held by the protocol\nitself. If\nanother order is placed which satisfies Sally\u2019s order, the protocol\nmatches them, and sends each counterparty its respective funds."),Object(r.b)("h4",{id:"automatic-order-matching-on-the-bitcoin-blockchain"},"Automatic order matching on the Bitcoin blockchain"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"give_quantity1 / get_quantity1"),' is the "ratio" in which Sally will\nexchange ',Object(r.b)("inlineCode",{parentName:"p"},"give_asset1")," for ",Object(r.b)("inlineCode",{parentName:"p"},"get_asset1"),", and is denoted by ",Object(r.b)("inlineCode",{parentName:"p"},"ratio1"),". In\norder for two orders to be matched, ",Object(r.b)("inlineCode",{parentName:"p"},"ratio1  must always be\u2019\u2018greater\nthan or equal\u2019\u2019 to the inverse of "),"ratio2",Object(r.b)("inlineCode",{parentName:"p"},", Thus, if, for example\n"),"ratio2 (give_quantity1 + 1) / get_quantity1",Object(r.b)("inlineCode",{parentName:"p"},"would be high enough\nratio to match Sally\u2019s bet, but if"),"ratio2 =(quantity2 - 1) / quantity2",Object(r.b)("inlineCode",{parentName:"p"},"it would not. Having been\nmatched, the exchange is always made at"),"ratio1`. Further, when when an\norder is matched, the exchange is always settled as much as it can be."),Object(r.b)("h4",{id:"a-straightforward-case"},"A straightforward case"),Object(r.b)("p",null,"Suppose that Alice places order2 before ",Object(r.b)("inlineCode",{parentName:"p"},"expiration"),"1 which matches\norder1 perfectly: ",Object(r.b)("inlineCode",{parentName:"p"},"give_quantity2 == get_quantity1"),"\n",Object(r.b)("inlineCode",{parentName:"p"},"get_quantity2 == give_quantity1"),". Once Alice has made her order, the\nprotocol debits ",Object(r.b)("inlineCode",{parentName:"p"},"quantity2")," of ",Object(r.b)("inlineCode",{parentName:"p"},"asset2")," from her address, and, since\nher order satisfies Sally\u2019s, Alice\u2019s order funds are sent to Alice, and\nSally\u2019s order funds are sent to Alice. This completes the trade between\nAlice and Sally."),Object(r.b)("h4",{id:"matching-an-order-partially-fulfilling-an-order"},"Matching an order: partially fulfilling an order"),Object(r.b)("p",null,"For the following example, let ",Object(r.b)("inlineCode",{parentName:"p"},"give_quantity1 = 10")," and\n",Object(r.b)("inlineCode",{parentName:"p"},"get_quantity1 = 20"),", and that neither ",Object(r.b)("inlineCode",{parentName:"p"},"give_asset1")," nor ",Object(r.b)("inlineCode",{parentName:"p"},"get_asset1"),"\nis BTC. Suppose that Alice wants to match Sally\u2019s order, does not want\nall 10 of ",Object(r.b)("inlineCode",{parentName:"p"},"give_asset"),"; rather, she only wants 8."),Object(r.b)("p",null,"Since the ",Object(r.b)("inlineCode",{parentName:"p"},"ratio1 == 10/20 == 1/2"),", Alice must ",Object(r.b)("inlineCode",{parentName:"p"},"ratio2 >= 2/1"),", to match\nSally\u2019s order. In other words Alice must offer \u2018\u2019at least\u2019\u201816 of\n",Object(r.b)("inlineCode",{parentName:"p"},"asset_2")," to get 8 of ",Object(r.b)("inlineCode",{parentName:"p"},"asset_1")," from Sally\u2019s order. Let\u2019s say Alice\nconstructs order2 such that ",Object(r.b)("inlineCode",{parentName:"p"},"give_quantity2 == 18")," and hence\n",Object(r.b)("inlineCode",{parentName:"p"},"ratio2 = 18/8 > 2/1"),". The order will be settled at ",Object(r.b)("inlineCode",{parentName:"p"},"ratio1"),": for every\nunit of ",Object(r.b)("inlineCode",{parentName:"p"},"give_asset1")," that Sally gives Alice, she will get two units of\n",Object(r.b)("inlineCode",{parentName:"p"},"get_asset1"),". Moreover, since every trade is settled as much and\n",Object(r.b)("inlineCode",{parentName:"p"},"give_quantity2 == 18")," Sally will receive\u2019\u201818\u2019\u2019 ",Object(r.b)("inlineCode",{parentName:"p"},"get_asset1")," in exchange\nfor 9 ",Object(r.b)("inlineCode",{parentName:"p"},"give_asset1"),"."),Object(r.b)("h4",{id:"trading-btc-on-the-decentralized-exchange"},"Trading BTC on the decentralized exchange"),Object(r.b)("p",null,"Suppose Sally makes an order to trade ",Object(r.b)("inlineCode",{parentName:"p"},"asset")," in exchange for BTC, and\nAlice makes an order to trade BTC in exchange for ",Object(r.b)("inlineCode",{parentName:"p"},"asset"),". Upon placing\norder1, Sally\u2019s account is immediately debited, as usual, and, once\nAlice has placed ",Object(r.b)("inlineCode",{parentName:"p"},"order2"),", it is matched with ",Object(r.b)("inlineCode",{parentName:"p"},"order1"),". However, her BTC is\nnot debited from her account, and the protocol will not send her Sally\u2019s\nXCP until Alice sends her BTC using Counterparty\u2019s ",Object(r.b)("inlineCode",{parentName:"p"},"btcpay")," function. If\nAlice sends the BTC using ",Object(r.b)("inlineCode",{parentName:"p"},"btcpay")," in \u2018\u2019fewer than 10 blocks\u2019\u2019, the\nprotocol will send her the XCP and thereby complete the transaction,\notherwise, the trade expires, and the protocol will re-credit Sally\u2019s\naddress with ",Object(r.b)("inlineCode",{parentName:"p"},"give_asset"),". This feature is enabled on the CLI, and disabled on ",Object(r.b)("a",{parentName:"p",href:"http://counterwallet.io"},"Counterwallet"),", due to incompatibility with the browser-based security model."))}b.isMDXComponent=!0},126:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),b=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||r;return n?i.a.createElement(h,o(o({ref:t},l),{},{components:n})):i.a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<r;l++)s[l]=n[l];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);